// Name and UIN
// Andre Athari
// 633008865

CHIP CPU{

    IN  fromM[16],          // M value input  (M = contents of RAM[Address])
        In[16],    	        // Instruction for execution
        Reset;              // Signals whether to re-start the current
                            // program (Reset==1) or continue executing
                            // the current program (Reset==0).

    OUT toM[16],            // M value output
        writeM,             // Write to M 
        addressM[16],       // Address in data memory (of M)
        PCOut[16];          // address of next instruction

    PARTS:
    // Instruction bits along with the inverted versions
    Mux16(a = ALUOut, b = fromM, sel=In[15], out=loading);

    DMux4Way(in=true, sel=In[14..15], a=arithmetic, b=logical, c=memoryBranch, d=inputOutput);
    DMux4Way(in=arithmetic, sel=In[12..13], a=add, b=addi, c=sub, d=subi);
    DMux(in=logical, sel=In[13], a=doNand, b=doNor);
    DMux4Way(in=memoryBranch, sel=In[12..13], a=read, b=beq, c=write, d=jump);
    DMux4Way(in=inputOutput, sel=In[12..13], a=output, c=input);

    // 1. Register control //
    Or(a=arithmetic, b=logical, out=w1);
    Or(a=read, b=input, out=w2);
    Or(a=w1, b=w2, out=loaded);
    DMux8Way(in=loaded, sel=In[9..11], a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);

    // Register control //
    Register(in=loading, load=load0, out=regout0);
    Register(in=loading, load=load1, out=regout1);
    Register(in=loading, load=load2, out=regout2);
    Register(in=loading, load=load3, out=regout3);
    Register(in=loading, load=load4, out=regout4);
    Register(in=loading, load=load5, out=regout5);
    Register(in=loading, load=load6, out=regout6);
    Register(in=loading, load=load7, out=regout7);

    Mux8Way16(a=regout0, b=regout1, c=regout2, d=regout3, e=regout4, f=regout5, g=regout6, h=regout7, sel=In[6..8], out=src1reg);
    Mux8Way16(a=regout0, b=regout1, c=regout2, d=regout3, e=regout4, f=regout5, g=regout6, h=regout7, sel=In[3..5], out=src2reg);
    Or(a=addi, b=subi, out=const);
    Mux16(a=src2reg, b[0..5]=In[0..5], sel=const, out=rhs);
    
    // 2. ALU  //

    ALU(x=src1reg, y=rhs, AluOp=In[12..15], AluOut=ALUOut, overflow=ignore);

    // ALU //

    Or(a = write, b=output, out=w3);
    Mux16(a = false, b=src1reg, sel=w3, out=toM);


    // 3. Prepare the Memory Address addressM (in case of READ and Write), Memory Data toM (in case of Write or OUT)
    // addressM //

    Mux8Way16(a=regout0, b=regout1, c=regout2, d=regout3, e=regout4, f=regout5, g=regout6, h=regout7, sel=In[6..8], out=readAddress, out[0..7]=readLow, out[8..15]=readHigh);
    Mux8Way16(a=regout0, b=regout1, c=regout2, d=regout3, e=regout4, f=regout5, g=regout6, h=regout7, sel=In[9..11], out=writeRAM, out=inPC);

    Mux8Way16(h[15]=true, h[14]=false, h[13]=true, h[0..12]=false, sel=In[13..15], out=inputAddress);
    Mux4Way16(a=readAddress, b=writeRAM, c=readAddress, d=inputAddress, sel=In[13..14], out=actionAddress);

    Or(a=read, b=write, out=w4);
    Or(a=input, b=output, out=w5);
    Or(a=w4, b=w5, out=addressCheck);

    // addressM //

    Mux16(a=false, b=actionAddress, sel=addressCheck, out=addressM);

    // 4. Generate the writeM signal (memory write for RAM or Screen)
    // writeM is true if it is a Memory Write operation or a Screen OUT operation
    // writeM //
   
    Or(a=write, b=output, out=writeM);

    // writeM //


    Or8Way(in=readLow, out=w6);
    Or8Way(in=readHigh, out=w7);
    Or(a=w6, b=w7, out=nonZeroAddress);
    Not(in=nonZeroAddress, out=ZeroAddress);

    And(a=ZeroAddress, b=beq, out=w8);
    Or(a=w8, b=jump, out=jumping);

    
    
    // 5. We load the PC with new value if there is a branch
    // Branch can be conditional or unconditional
    // Unconditional => In[15..12] = 1011
    // Conditional => In[15..12] = 1001 && In[8..6]==000
    // PC //

    PC(in=inPC, load=jumping, inc=true, reset=Reset, out=PCOut);
    // PC //
} 